/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.zx.shopmanagementsystem.forms;

import com.zx.shopmanagementsystem.assests.Func;
import com.zx.shopmanagementsystem.assests.IconLocation;
import com.zx.shopmanagementsystem.dbconnection.JDBC;
import com.zx.shopmanagementsystem.table.TableCustom;
import com.zx.shopmanagementsystem.ui.InvoiceCategory;
import com.zx.shopmanagementsystem.ui.NewInvoice;
import com.zx.shopmanagementsystem.ui.PaymentMethod;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class InvoiceCreation extends javax.swing.JPanel {

    /**
     * Creates new form Home
     */
    public int uid;
    Func func = new Func();
    IconLocation il = new IconLocation();
    JDBC DB = new JDBC();

    public InvoiceCreation() {
        initComponents();
        TableCustom.apply(jScrollPane1, TableCustom.TableType.MULTI_LINE);
        tableDataClear();
        tableDataLoader();
        // Add a DocumentListener to the searchTxt
        searchTxt.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                try {
                    // Call your method to handle the text update
                    handleSearchTextUpdate();
                } catch (Exception ex) {
                    Logger.getLogger(CustomerManagement.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                try {
                    // Call your method to handle the text update
                    handleSearchTextUpdate();
                } catch (Exception ex) {
                    Logger.getLogger(CustomerManagement.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                try {
                    // Call your method to handle the text update
                    handleSearchTextUpdate();
                } catch (Exception ex) {
                    Logger.getLogger(CustomerManagement.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createNewInvoice = new javax.swing.JLabel();
        paymentMethodBtnLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        expireTbl = new javax.swing.JTable();
        searchTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        iconLbl = new javax.swing.JLabel();

        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(1116, 718));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        createNewInvoice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createNewInvoiceMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                createNewInvoiceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                createNewInvoiceMouseExited(evt);
            }
        });
        add(createNewInvoice, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, 270, 45));

        paymentMethodBtnLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paymentMethodBtnLblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                paymentMethodBtnLblMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                paymentMethodBtnLblMouseExited(evt);
            }
        });
        add(paymentMethodBtnLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 80, 260, 45));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        expireTbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        expireTbl.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        expireTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Invoice No", "Date", "Time", "Price", "Payment Method", "Customer Name", "Invoice Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(expireTbl);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 207, 1020, 470));

        searchTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        searchTxt.setHintText("Customer Name or Invoice ID");
        searchTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTxtActionPerformed(evt);
            }
        });
        add(searchTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(757, 160, 260, -1));

        iconLbl.setBackground(new java.awt.Color(255, 255, 255));
        iconLbl.setIcon(new javax.swing.ImageIcon("C:\\ShopManagementSystem\\src\\main\\java\\com\\zx\\shopmanagementsystem\\images\\InvoiceCreation.png")); // NOI18N
        add(iconLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void createNewInvoiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createNewInvoiceMouseClicked
        // TODO add your handling code here:
        NewInvoice ni = new NewInvoice();
        ni.setVisible(true);
        System.out.println("ID : " + uid);
    }//GEN-LAST:event_createNewInvoiceMouseClicked

    private void createNewInvoiceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createNewInvoiceMouseEntered
        // TODO add your handling code here:

    }//GEN-LAST:event_createNewInvoiceMouseEntered

    private void createNewInvoiceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createNewInvoiceMouseExited
        // TODO add your handling code here:

    }//GEN-LAST:event_createNewInvoiceMouseExited

    private void paymentMethodBtnLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentMethodBtnLblMouseClicked
        // TODO add your handling code here:
        PaymentMethod pm = new PaymentMethod();
        pm.setVisible(true);
    }//GEN-LAST:event_paymentMethodBtnLblMouseClicked

    private void paymentMethodBtnLblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentMethodBtnLblMouseEntered
        // TODO add your handling code here:

    }//GEN-LAST:event_paymentMethodBtnLblMouseEntered

    private void paymentMethodBtnLblMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentMethodBtnLblMouseExited
        // TODO add your handling code here:

    }//GEN-LAST:event_paymentMethodBtnLblMouseExited

    private void searchTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTxtActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel createNewInvoice;
    private javax.swing.JTable expireTbl;
    private javax.swing.JLabel iconLbl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel paymentMethodBtnLbl;
    private com.zx.shopmanagementsystem.components.RoundedText searchTxt;
    // End of variables declaration//GEN-END:variables

    private void tableDataLoader() {
        try {
            String sql = "SELECT \n"
                    + "    cp.cash_invoice_id,\n"
                    + "    cp.date,\n"
                    + "    cp.time,\n"
                    + "    cp.price,\n"
                    + "    pm.payment_method_type,\n"
                    + "    c.customer_name,\n"
                    + "    ic.invoice_category_type\n"
                    + "FROM\n"
                    + "    shopdb.cash_payment cp\n"
                    + "        JOIN\n"
                    + "    shopdb.payment_method pm ON cp.payment_method_id = pm.payment_method_id\n"
                    + "        JOIN\n"
                    + "    shopdb.customer c ON cp.customer_id = c.customer_id\n"
                    + "        JOIN\n"
                    + "    shopdb.invoice_catergory ic ON cp.invoice_category_id = ic.invoice_category_id\n"
                    + "ORDER BY cp.date DESC , cp.time DESC;";

            java.sql.ResultSet rs = DB.getdata(sql);
            while (rs.next()) {
                String cash_invoice_id = String.valueOf(rs.getInt("cash_invoice_id"));
                String date = String.valueOf(rs.getString("date"));
                String time = String.valueOf(rs.getString("time"));
                String price = String.valueOf(rs.getString("price"));
                String payment_method_type = String.valueOf(rs.getString("payment_method_type"));
                String customer_name = String.valueOf(rs.getString("customer_name"));
                String invoice_category_type = String.valueOf(rs.getString("invoice_category_type"));

                String table_data[] = {cash_invoice_id, date, time, price, payment_method_type, customer_name, invoice_category_type};
                DefaultTableModel table = (DefaultTableModel) expireTbl.getModel();
                table.addRow(table_data);

            }
            DB.con().close();
        } catch (Exception ex) {
            System.out.println("Payment History Table Data Loader : " + ex);
        }
    }

    private void tableDataClear() {
        try {
            while (0 <= expireTbl.getRowCount()) {
                DefaultTableModel table = (DefaultTableModel) expireTbl.getModel();
                table.removeRow(expireTbl.getRowCount() - 1);
            }
        } catch (Exception e) {
            System.out.println("Payment History Table Data Clear : " + e);
        }
    }

    private void handleSearchTextUpdate() throws Exception {
        if (searchTxt.getText().equals("")) {
            tableDataClear();
            tableDataLoader();
        } else {

            tableDataClear();
            String sql = "SELECT \n"
                    + "    cp.cash_invoice_id,\n"
                    + "    cp.date,\n"
                    + "    cp.time,\n"
                    + "    cp.price,\n"
                    + "    pm.payment_method_type,\n"
                    + "    c.customer_name,\n"
                    + "    ic.invoice_category_type\n"
                    + "FROM\n"
                    + "    shopdb.cash_payment cp\n"
                    + "JOIN\n"
                    + "    shopdb.payment_method pm ON cp.payment_method_id = pm.payment_method_id\n"
                    + "JOIN\n"
                    + "    shopdb.customer c ON cp.customer_id = c.customer_id\n"
                    + "JOIN\n"
                    + "    shopdb.invoice_catergory ic ON cp.invoice_category_id = ic.invoice_category_id\n"
                    + "WHERE\n"
                    + "    c.customer_name LIKE ? OR cp.cash_invoice_id = ?\n"
                    + "ORDER BY\n"
                    + "    cp.date DESC, cp.time DESC;";

            try (PreparedStatement preparedStatement = DB.con().prepareStatement(sql)) {
                preparedStatement.setString(1, "%" + searchTxt.getText() + "%");
                preparedStatement.setString(2, searchTxt.getText());

                ResultSet rs = preparedStatement.executeQuery();

                // Process the resultSet as needed
                while (rs.next()) {
                    String cash_invoice_id = String.valueOf(rs.getInt("cash_invoice_id"));
                    String date = String.valueOf(rs.getString("date"));
                    String time = String.valueOf(rs.getString("time"));
                    String price = String.valueOf(rs.getString("price"));
                    String payment_method_type = String.valueOf(rs.getString("payment_method_type"));
                    String customer_name = String.valueOf(rs.getString("customer_name"));
                    String invoice_category_type = String.valueOf(rs.getString("invoice_category_type"));

                    String table_data[] = {cash_invoice_id, date, time, price, payment_method_type, customer_name, invoice_category_type};
                    DefaultTableModel table = (DefaultTableModel) expireTbl.getModel();
                    table.addRow(table_data);

                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }

    }
}
