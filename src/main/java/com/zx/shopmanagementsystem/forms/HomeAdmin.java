/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.zx.shopmanagementsystem.forms;

import com.zx.shopmanagementsystem.barchart.ModelChart;
import com.zx.shopmanagementsystem.chart.ModelData;
import com.zx.shopmanagementsystem.components.PanelGlowingGradient;
import com.zx.shopmanagementsystem.dbconnection.JDBC;
import java.awt.Color;
import java.awt.Graphics;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author User
 */
public class HomeAdmin extends javax.swing.JPanel {

    /**
     * Creates new form Home
     */
    JDBC DB = new JDBC();
    private List<String> stockItems = new ArrayList<>();
    private List<String> stockLocations = new ArrayList<>();
    private int currentIndex = 0;

    public HomeAdmin() {
        initComponents();
        setChart();
        setData();
        getDailySale();
        getMonthlySale();
        arrayLoader();
        Timer timer = new Timer();
        long delay = 2000; // Initial delay in milliseconds
        long period = 5000; // Repeat every 5 seconds (5000 milliseconds)
        timer.schedule(new DisplayTask(), delay, period);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panal3 = new com.zx.shopmanagementsystem.components.PanelGlowingGradient();
        jLabel3 = new javax.swing.JLabel();
        store_Location = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        itemName = new javax.swing.JLabel();
        panal2 = new com.zx.shopmanagementsystem.components.PanelGlowingGradient();
        jLabel2 = new javax.swing.JLabel();
        totalMonthSaleTxt = new javax.swing.JLabel();
        panal1 = new com.zx.shopmanagementsystem.components.PanelGlowingGradient();
        jLabel1 = new javax.swing.JLabel();
        totalDailySaleTxt = new javax.swing.JLabel();
        panelBorder1 = new com.raven.swing.PanelBorder();
        chart = new com.zx.shopmanagementsystem.barchart.Chart();
        iconLbl = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1015, 738));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panal3.setBackground(new java.awt.Color(114, 179, 240));
        panal3.setBackgroundLight(new java.awt.Color(114, 179, 240));
        panal3.setGradientColor1(new java.awt.Color(107, 1, 145));
        panal3.setGradientColor2(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Low Stock Alart");
        panal3.add(jLabel3);
        jLabel3.setBounds(90, 30, 110, 20);

        store_Location.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        store_Location.setForeground(new java.awt.Color(255, 255, 255));
        store_Location.setText("Store Location");
        panal3.add(store_Location);
        store_Location.setBounds(40, 130, 200, 30);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Item Name");
        panal3.add(jLabel7);
        jLabel7.setBounds(40, 50, 200, 30);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Store Location");
        panal3.add(jLabel8);
        jLabel8.setBounds(40, 110, 200, 30);

        itemName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        itemName.setForeground(new java.awt.Color(255, 255, 255));
        itemName.setText("Item Name");
        panal3.add(itemName);
        itemName.setBounds(41, 73, 200, 30);

        add(panal3, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 130, 280, 200));

        panal2.setBackground(new java.awt.Color(175, 93, 240));
        panal2.setBackgroundLight(new java.awt.Color(175, 93, 240));
        panal2.setGradientColor1(new java.awt.Color(107, 1, 145));
        panal2.setGradientColor2(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Monthly Sales");
        panal2.add(jLabel2);
        jLabel2.setBounds(90, 30, 100, 20);

        totalMonthSaleTxt.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        totalMonthSaleTxt.setForeground(new java.awt.Color(255, 255, 255));
        totalMonthSaleTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panal2.add(totalMonthSaleTxt);
        totalMonthSaleTxt.setBounds(35, 70, 210, 100);

        add(panal2, new org.netbeans.lib.awtextra.AbsoluteConstraints(372, 130, 280, 200));

        panal1.setBackground(new java.awt.Color(182, 58, 202));
        panal1.setBackgroundLight(new java.awt.Color(182, 58, 202));
        panal1.setGradientColor1(new java.awt.Color(107, 1, 145));
        panal1.setGradientColor2(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Today Sales");
        panal1.add(jLabel1);
        jLabel1.setBounds(100, 30, 80, 20);

        totalDailySaleTxt.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        totalDailySaleTxt.setForeground(new java.awt.Color(255, 255, 255));
        totalDailySaleTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panal1.add(totalDailySaleTxt);
        totalDailySaleTxt.setBounds(35, 66, 210, 100);

        add(panal1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 280, 200));

        panelBorder1.setBackground(new java.awt.Color(153, 0, 153));

        chart.setBackground(new java.awt.Color(153, 0, 153));
        chart.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, 908, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(panelBorder1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 400, 920, 320));

        iconLbl.setIcon(new javax.swing.ImageIcon("C:\\ShopManagementSystem\\src\\main\\java\\com\\zx\\shopmanagementsystem\\images\\Dashboard.png")); // NOI18N
        add(iconLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents
class DisplayTask extends TimerTask {

        @Override
        public void run() {
            if (currentIndex < stockItems.size()) {
                String currentItem = stockItems.get(currentIndex);
                String storeLocation = stockLocations.get(currentIndex);
                itemName.setText(currentItem);
                store_Location.setText(storeLocation);
                currentIndex++;
            } else {
                // Reset to the beginning when all items are displayed
                currentIndex = 0;
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.zx.shopmanagementsystem.barchart.Chart chart;
    private javax.swing.JLabel iconLbl;
    private javax.swing.JLabel itemName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private com.zx.shopmanagementsystem.components.PanelGlowingGradient panal1;
    private com.zx.shopmanagementsystem.components.PanelGlowingGradient panal2;
    private com.zx.shopmanagementsystem.components.PanelGlowingGradient panal3;
    private com.raven.swing.PanelBorder panelBorder1;
    private javax.swing.JLabel store_Location;
    private javax.swing.JLabel totalDailySaleTxt;
    private javax.swing.JLabel totalMonthSaleTxt;
    // End of variables declaration//GEN-END:variables

    private void setChart() {
        chart.addLegend("Sales", Color.decode("#f56942"));
        chart.addLegend("Profit", Color.decode("#00fa21"));
    }

    private void setData() {
        try {
            List<ModelData> list = new ArrayList<>();
            ResultSet rs = DB.getdata("SELECT \n"
                    + "    DATE_FORMAT(date, '%Y-%m-%d') AS formatted_date,\n"
                    + "    SUM(sale) AS total_sales,\n"
                    + "    SUM(profit) AS total_profit\n"
                    + "FROM shopdb.user_profile\n"
                    + "WHERE date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)\n"
                    + "GROUP BY formatted_date\n"
                    + "ORDER BY formatted_date;");
            while (rs.next()) {
                String date = rs.getString("formatted_date");
                double sale = Double.parseDouble(rs.getString("total_sales"));
                double profit = Double.parseDouble(rs.getString("total_profit"));
                list.add(new ModelData(date, sale, profit));
            }
            rs.close();

            for (ModelData d : list) {
                chart.addData(new ModelChart(d.getDate(), new double[]{d.getSale(), d.getProfit()}));
            }
            chart.start();
        } catch (Exception ex) {
            System.err.println("Analisis SetData : " + ex.getMessage());
        }
    }

    private void arrayLoader() {
        String sql = "SELECT p.product_name, s.store_location_name\n"
                + "FROM shopdb.product p\n"
                + "JOIN shopdb.store_location s ON p.store_location_id = s.store_location_id\n"
                + "WHERE p.stock_quantity < 1000;";
        try {
            ResultSet rs = DB.getdata(sql);
            ResultSet rs1 = DB.getdata(sql);
            if (!rs.next()) {
                System.out.println("ResultSet Empty");
            } else {
                System.out.println("ResultSet Not Empty");
                while (rs1.next()) {
                    stockItems.add(rs1.getString("product_name"));
                    stockLocations.add(rs1.getString("store_location_name"));
                }
            }
        } catch (Exception ex) {
            System.err.println("ArrayLoader : " + ex.getMessage());
        }
    }

    private void getDailySale() {
        String sql = "SELECT SUM(sale) AS total_sales\n"
                + "FROM shopdb.user_profile\n"
                + "WHERE DATE(date) = CURDATE();";

        try {
            ResultSet rs = DB.getdata(sql);
            if (rs.next()) {
                totalDailySaleTxt.setText("Rs." + rs.getString("total_sales") + "0/=");
            }
        } catch (Exception ex) {
            Logger.getLogger(HomeAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getMonthlySale() {
        String sql = "SELECT SUM(sale) AS total_sales\n"
                + "FROM shopdb.user_profile\n"
                + "WHERE YEAR(date) = YEAR(CURDATE()) AND MONTH(date) = MONTH(CURDATE());";

        try {
            ResultSet rs = DB.getdata(sql);
            if (rs.next()) {
                totalMonthSaleTxt.setText("Rs." + rs.getString("total_sales") + "0/=");
            }
        } catch (Exception ex) {
            Logger.getLogger(HomeAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
