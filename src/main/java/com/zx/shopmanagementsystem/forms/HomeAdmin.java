/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.zx.shopmanagementsystem.forms;

import com.zx.shopmanagementsystem.barchart.ModelChart;
import com.zx.shopmanagementsystem.chart.ModelData;
import com.zx.shopmanagementsystem.dbconnection.JDBC;
import com.zx.shopmanagementsystem.piechart.ModelPieChart;
import com.zx.shopmanagementsystem.ui.AllSales;
import com.zx.shopmanagementsystem.ui.LowStock;
import com.zx.shopmanagementsystem.ui.TopPerformingReport;
import java.awt.Color;
import java.io.FileInputStream;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author User
 */
public class HomeAdmin extends javax.swing.JPanel {

    /**
     * Creates new form Home
     */
    JDBC DB = new JDBC();
    private List<String> stockItems = new ArrayList<>();
    private List<String> stockLocations = new ArrayList<>();
    private int currentIndex = 0;
    int quantityValue;

    public HomeAdmin() {
        initComponents();
        jsonRead();
        setChart();
        setData();
        getDailySale();
        getMonthlySale();
        setWeekPieChart();
        arrayLoader();
        Timer timer = new Timer();
        long delay = 2000; // Initial delay in milliseconds
        // Repeat every 5 seconds (5000 milliseconds)
        timer.schedule(new DisplayTask(), delay, 5000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        totalDailySaleTxt = new javax.swing.JLabel();
        itemName = new javax.swing.JLabel();
        store_Location = new javax.swing.JLabel();
        lowStockBtnLbl = new javax.swing.JLabel();
        todaySalseViewAllBtnLbl = new javax.swing.JLabel();
        monthlySalseViewAllBtnLbl = new javax.swing.JLabel();
        totalMonthSaleTxt = new javax.swing.JLabel();
        chart = new com.zx.shopmanagementsystem.barchart.Chart();
        weekPieChat = new com.zx.shopmanagementsystem.piechart.PieChart();
        jLabel1 = new javax.swing.JLabel();
        iconLbl = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1116, 718));
        setVerifyInputWhenFocusTarget(false);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        totalDailySaleTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 30)); // NOI18N
        totalDailySaleTxt.setForeground(new java.awt.Color(255, 255, 255));
        totalDailySaleTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(totalDailySaleTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 155, 295, 80));

        itemName.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        itemName.setForeground(new java.awt.Color(255, 255, 255));
        itemName.setText("Item Name");
        add(itemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 165, 200, 30));

        store_Location.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        store_Location.setForeground(new java.awt.Color(255, 255, 255));
        store_Location.setText("Store Location");
        add(store_Location, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 215, 200, 30));

        lowStockBtnLbl.setPreferredSize(new java.awt.Dimension(287, 39));
        lowStockBtnLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lowStockBtnLblMouseClicked(evt);
            }
        });
        add(lowStockBtnLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 300, 290, 30));

        todaySalseViewAllBtnLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                todaySalseViewAllBtnLblMouseClicked(evt);
            }
        });
        add(todaySalseViewAllBtnLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 300, 280, 30));

        monthlySalseViewAllBtnLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monthlySalseViewAllBtnLblMouseClicked(evt);
            }
        });
        add(monthlySalseViewAllBtnLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 300, 280, 30));

        totalMonthSaleTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 30)); // NOI18N
        totalMonthSaleTxt.setForeground(new java.awt.Color(255, 255, 255));
        totalMonthSaleTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(totalMonthSaleTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(415, 155, 295, 80));

        chart.setFont(new java.awt.Font("Poppins SemiBold", 1, 12)); // NOI18N
        chart.setOpaque(false);
        add(chart, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 360, 645, 315));

        weekPieChat.setFont(new java.awt.Font("Poppins SemiBold", 1, 12)); // NOI18N

        jLabel1.setText("jLabel1");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        weekPieChat.add(jLabel1);
        jLabel1.setBounds(37, 310, 290, 20);

        add(weekPieChat, new org.netbeans.lib.awtextra.AbsoluteConstraints(725, 337, 370, 360));

        iconLbl.setIcon(new javax.swing.ImageIcon("C:\\ShopManagementSystem\\src\\main\\java\\com\\zx\\shopmanagementsystem\\images\\AdminDashboard.png")); // NOI18N
        add(iconLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void lowStockBtnLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lowStockBtnLblMouseClicked
        // TODO add your handling code here:
        LowStock ls = new LowStock();
        ls.setVisible(true);
    }//GEN-LAST:event_lowStockBtnLblMouseClicked

    private void todaySalseViewAllBtnLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_todaySalseViewAllBtnLblMouseClicked
        // TODO add your handling code here:
        AllSales as = new AllSales(0);
        as.setVisible(true);
    }//GEN-LAST:event_todaySalseViewAllBtnLblMouseClicked

    private void monthlySalseViewAllBtnLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthlySalseViewAllBtnLblMouseClicked
        // TODO add your handling code here:
        AllSales as = new AllSales(1);
        as.setVisible(true);
    }//GEN-LAST:event_monthlySalseViewAllBtnLblMouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        new TopPerformingReport().setVisible(true);
    }//GEN-LAST:event_jLabel1MouseClicked

    class DisplayTask extends TimerTask {

        @Override
        public void run() {
            if (currentIndex < stockItems.size()) {
                String currentItem = stockItems.get(currentIndex);
                String storeLocation = stockLocations.get(currentIndex);
                itemName.setText(currentItem);
                store_Location.setText(storeLocation);
                currentIndex++;
            } else {
                // Reset to the beginning when all items are displayed
                currentIndex = 0;
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.zx.shopmanagementsystem.barchart.Chart chart;
    private javax.swing.JLabel iconLbl;
    private javax.swing.JLabel itemName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lowStockBtnLbl;
    private javax.swing.JLabel monthlySalseViewAllBtnLbl;
    private javax.swing.JLabel store_Location;
    private javax.swing.JLabel todaySalseViewAllBtnLbl;
    private javax.swing.JLabel totalDailySaleTxt;
    private javax.swing.JLabel totalMonthSaleTxt;
    private com.zx.shopmanagementsystem.piechart.PieChart weekPieChat;
    // End of variables declaration//GEN-END:variables

    private void setChart() {
        chart.addLegend("Sales", Color.decode("#f56942"));
        chart.addLegend("Profit", Color.decode("#00fa21"));
        chart.addLegend("Expenses", Color.RED);
    }

    private void setData() {

        try {
            List<ModelData> list = new ArrayList<>();
            ResultSet rs = DB.getdata("SELECT\n"
                    + "    date,\n"
                    + "    COALESCE(SUM(total_sales), 0) AS total_sales,\n"
                    + "    COALESCE(SUM(total_profit), 0) AS total_profit,\n"
                    + "    COALESCE(SUM(total_expenses), 0) AS total_expenses\n"
                    + "FROM (\n"
                    + "    -- Subquery for total sales and profit\n"
                    + "    SELECT\n"
                    + "        DATE(date) AS date,\n"
                    + "        SUM(price) AS total_sales,\n"
                    + "        SUM(profit) AS total_profit,\n"
                    + "        0 AS total_expenses\n"
                    + "    FROM\n"
                    + "        shopdb.sold_items\n"
                    + "    WHERE\n"
                    + "        date BETWEEN CURDATE() - INTERVAL 6 DAY AND CURDATE()\n"
                    + "    GROUP BY\n"
                    + "        DATE(date)\n"
                    + "\n"
                    + "    UNION ALL\n"
                    + "\n"
                    + "    -- Subquery for total expenses\n"
                    + "    SELECT\n"
                    + "        DATE(expenses_date) AS date,\n"
                    + "        0 AS total_sales,\n"
                    + "        0 AS total_profit,\n"
                    + "        SUM(expenses_amount) AS total_expenses\n"
                    + "    FROM\n"
                    + "        shopdb.expenses\n"
                    + "    WHERE\n"
                    + "        expenses_date BETWEEN CURDATE() - INTERVAL 7 DAY AND CURDATE()\n"
                    + "    GROUP BY\n"
                    + "        DATE(expenses_date)\n"
                    + ") AS combined_data\n"
                    + "GROUP BY\n"
                    + "    date\n"
                    + "ORDER BY\n"
                    + "    date DESC;");
            while (rs.next()) {
                String date = rs.getString("date");
                double sale = Double.parseDouble(rs.getString("total_sales"));
                double profit = Double.parseDouble(rs.getString("total_profit"));
                double expenses = Double.parseDouble(rs.getString("total_expenses"));
                list.add(new ModelData(date, sale, profit, expenses));
            }
            rs.close();

            for (ModelData d : list) {
                chart.addData(new ModelChart(d.getDate(), new double[]{d.getSale(), d.getProfit(), d.getExpenses()}));
            }
            chart.start();
        } catch (Exception ex) {
            System.err.println("Analisis SetData : " + ex.getMessage());
        }
    }

    private void arrayLoader() {
        String sql = "SELECT p.product_name, s.store_location_name\n"
                + "FROM shopdb.product p\n"
                + "JOIN shopdb.store_location s ON p.store_location_id = s.store_location_id\n"
                + "WHERE p.stock_quantity <= " + quantityValue + ";";
        try {
            ResultSet rs = DB.getdata(sql);
            ResultSet rs1 = DB.getdata(sql);
            if (!rs.next()) {
                itemName.setText("No Items to Show");
                store_Location.setText("No Items to Show");
            } else {
                System.out.println("ResultSet Not Empty");
                while (rs1.next()) {
                    stockItems.add(rs1.getString("product_name"));
                    stockLocations.add(rs1.getString("store_location_name"));
                }
            }
        } catch (Exception ex) {
            System.err.println("ArrayLoader : " + ex.getMessage());
        }
    }

    private void getDailySale() {
        String sql = "SELECT FORMAT(SUM(price), 2) AS total_sales\n"
                + "FROM shopdb.sold_items\n"
                + "WHERE DATE(date) = CURDATE();";

        try {
            ResultSet rs = DB.getdata(sql);

            if (rs.next()) {
                String totalSales = rs.getString("total_sales");
                System.out.println(totalSales);

                if (totalSales == null) {
                    totalDailySaleTxt.setText("No Record");
                } else {
                    // Format the result with 2 decimal points
                    totalDailySaleTxt.setText("Rs." + totalSales + "/=");
                }
            }
        } catch (Exception ex) {
            System.err.println("getDailySale -> Home Admin : " + ex.getMessage());
        }
    }

    private void getMonthlySale() {
        String sql = "SELECT FORMAT(SUM(price), 2) AS total_sales\n"
                + "FROM shopdb.sold_items\n"
                + "WHERE YEAR(date) = YEAR(CURDATE()) AND MONTH(date) = MONTH(CURDATE());";

        try {
            ResultSet rs = DB.getdata(sql);
            if (rs.next()) {
                if (rs.getString("total_sales") == null) {
                    totalMonthSaleTxt.setText("No Record");
                } else {
                    totalMonthSaleTxt.setText("Rs." + rs.getString("total_sales") + "0/=");
                }
            }
        } catch (Exception ex) {
            System.err.println("getMonthlySale -> Home Admin : " + ex.getMessage());
        }
    }

    private void jsonRead() {
        Properties properties = new Properties();
        try (FileInputStream fileInputStream = new FileInputStream("Settings.properties")) {
            properties.load(fileInputStream);
            System.out.println("Settings loaded successfully.");

            // Access individual properties
            quantityValue = Integer.parseInt((properties.getProperty("LowStockAlert")));
        } catch (Exception en) {
            System.err.println("Home Admin LowStockAlert : " + en);
        }
    }

    private void setWeekPieChart() {
        weekPieChat.clearData();
        String sql = "SELECT\n"
                + "    s.product_id,\n"
                + "    p.product_name,\n"
                + "    SUM(s.quantity) as total_quantity\n"
                + "FROM\n"
                + "    shopdb.sold_items s\n"
                + "JOIN\n"
                + "    shopdb.product p ON s.product_id = p.product_id\n"
                + "WHERE\n"
                + "    date >= CURDATE() - INTERVAL 7 DAY\n"
                + "GROUP BY\n"
                + "    s.product_id, p.product_name\n"
                + "ORDER BY\n"
                + "    total_quantity DESC\n"
                + "LIMIT 5;";
        try {
            ResultSet rs = DB.getdata(sql);
            int index = 0;
            while (rs.next()) {
                String productName = rs.getString("product_name");
                double totalQuantity = Double.parseDouble(rs.getString("total_quantity"));

                weekPieChat.addData(new ModelPieChart(productName, totalQuantity, getColor(index++)));
            }

        } catch (Exception ex) {
            System.err.println("HomeAdmin -> setWeekPieChart : " + ex.getMessage());
        }
    }

    private Color getColor(int index) {
        Color[] color = new Color[]{Color.decode("#FFA84A"), Color.decode("#04BFDA"), Color.decode("#FB67CA"), Color.decode("#9B88ED"), Color.decode("#9bdfc4")};
        return color[index];
    }
}
