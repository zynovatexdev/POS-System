/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.zx.shopmanagementsystem.ui;

import com.zx.shopmanagementsystem.assests.Func;
import com.zx.shopmanagementsystem.assests.IconLocation;
import com.zx.shopmanagementsystem.dbconnection.JDBC;
import com.zx.shopmanagementsystem.notifications.ConfirmDialog;
import com.zx.shopmanagementsystem.notifications.MessageDialog;
import com.zx.shopmanagementsystem.table.TableCustom;
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class InvoiceCategory extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    Func func = new Func();
    IconLocation il = new IconLocation();
    JDBC DB = new JDBC();

    private int maxBarId;
    private int newBarId;
    private int methodExist;

    public InvoiceCategory() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(il.logo));
        getMaxValue();
        head1.setFrame(this);
        tableDataClear();
        tableDataLoader();
        TableCustom.apply(jScrollPane2, TableCustom.TableType.MULTI_LINE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        head1 = new com.zx.shopmanagementsystem.components.Head();
        invoiceCategoryTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        saveBtnLbl = new javax.swing.JLabel();
        panelBorder1 = new com.raven.swing.PanelBorder();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTxt = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        invoiceCategoryTbl = new javax.swing.JTable();
        iconLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        head1.setHeaderTitle("");
        head1.setOpaque(false);
        getContentPane().add(head1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, -1));

        invoiceCategoryTxt.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        invoiceCategoryTxt.setPreferredSize(new java.awt.Dimension(129, 50));
        getContentPane().add(invoiceCategoryTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 220, 350, -1));

        saveBtnLbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveBtnLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveBtnLblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                saveBtnLblMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                saveBtnLblMouseExited(evt);
            }
        });
        getContentPane().add(saveBtnLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 610, 200, 50));

        panelBorder1.setBackground(new java.awt.Color(255, 255, 255));

        descriptionTxt.setColumns(20);
        descriptionTxt.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        descriptionTxt.setRows(5);
        jScrollPane1.setViewportView(descriptionTxt);

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(panelBorder1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 330, 350, 170));

        invoiceCategoryTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Invoice Category", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoiceCategoryTbl.setPreferredSize(new java.awt.Dimension(155, 80));
        jScrollPane2.setViewportView(invoiceCategoryTbl);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 160, 635, 430));

        iconLbl.setIcon(new javax.swing.ImageIcon("C:\\ShopManagementSystem\\src\\main\\java\\com\\zx\\shopmanagementsystem\\images\\Invoice Category.png")); // NOI18N
        getContentPane().add(iconLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void saveBtnLblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBtnLblMouseEntered
        // TODO add your handling code here:

    }//GEN-LAST:event_saveBtnLblMouseEntered

    private void saveBtnLblMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBtnLblMouseExited
        // TODO add your handling code here:

    }//GEN-LAST:event_saveBtnLblMouseExited

    private void saveBtnLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBtnLblMouseClicked
        // TODO add your handling code here:
        save();
        tableDataClear();
        tableDataLoader();
    }//GEN-LAST:event_saveBtnLblMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvoiceCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvoiceCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvoiceCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvoiceCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvoiceCategory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea descriptionTxt;
    private com.zx.shopmanagementsystem.components.Head head1;
    private javax.swing.JLabel iconLbl;
    private javax.swing.JTable invoiceCategoryTbl;
    private com.zx.shopmanagementsystem.components.RoundedText invoiceCategoryTxt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.raven.swing.PanelBorder panelBorder1;
    private javax.swing.JLabel saveBtnLbl;
    // End of variables declaration//GEN-END:variables

    private void save() {
        MessageDialog DialogBox = new MessageDialog(this);
        String type = invoiceCategoryTxt.getText();
        String description = descriptionTxt.getText();

        if (type.equals("")) {
            DialogBox.showMessage("WARNING!!!", "Text Can't Empty", 2);
        } else if (description.equals("")) {
            DialogBox.showMessage("WARNING!!!", "Description Can't Empty", 2);
        } else {
            if (invoiceCategoryChecker(type) == 1) {
                DialogBox.showMessage("ERROR!!!", "Invoice Category is already taken.", 3);
            } else {
                ConfirmDialog confrim = new ConfirmDialog(this);
                confrim.showMessage("Save", "Do you want to Save ?");
                if (confrim.getMessageType() == ConfirmDialog.MessageType.YES) {
                    System.out.println("Yes");
                    try {
                        String sql = "INSERT INTO invoice_catergory (invoice_category_id, invoice_category_type, invoice_category_description) VALUES ('" + newBarId + "','" + type + "','" + description + "')";
                        DB.putdata(sql);
                        DialogBox.showMessage("Done!!!", "Invoice Category Successfully Saved", 1);
                        invoiceCategoryTxt.setText("");
                        descriptionTxt.setText("");
                        getMaxValue();

                    } catch (Exception ex) {
                        System.err.println("Save Invoice Category -> Invoice Category : " + ex.getMessage());
                    }
                } else {
                    System.out.println("No");
                }
            }
        }
    }

    private void getMaxValue() {
        try {
            java.sql.ResultSet rs1 = DB.getdata("SELECT MAX(invoice_category_id) FROM invoice_catergory");
            if (rs1.next()) {
                //System.out.println("Table not empty");
                maxBarId = rs1.getInt("max(invoice_category_id)");
                newId(maxBarId);
                System.out.println(newBarId);
            } else {
                System.out.println("Table Empty");
            }
            DB.con().close();
        } catch (Exception ex) {
            System.err.println("Get Max Value -> Invoice Category : " + ex.getMessage());
        }

    }

    private void newId(int maxValue) {
        newBarId = maxValue + 1;
    }

    public int invoiceCategoryChecker(String category) {
        String sql = "SELECT * FROM invoice_catergory WHERE invoice_category_type=?";
        try {
            PreparedStatement pstmt = DB.con().prepareStatement(sql);
            pstmt.setString(1, category);
            ResultSet resultSet = pstmt.executeQuery();
            if (resultSet.next()) {
                System.out.println("Invoice Category is already taken.");
                methodExist = 1;
            } else {
                System.out.println("Invoice Category is available.");
                methodExist = 0;
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage() + "Invoice Category Checker");
        }
        return methodExist;
    }

    private void tableDataLoader() {
        try {
            String sql = "SELECT * FROM invoice_catergory";

            java.sql.ResultSet rs = DB.getdata(sql);
            while (rs.next()) {
                String invoice_category_type = String.valueOf(rs.getString("invoice_category_type"));
                String invoice_category_description = String.valueOf(rs.getString("invoice_category_description"));

                String table_data[] = {invoice_category_type, invoice_category_description};
                DefaultTableModel table = (DefaultTableModel) invoiceCategoryTbl.getModel();
                table.addRow(table_data);

            }
            DB.con().close();
        } catch (Exception ex) {
            System.out.println("Payment History Table Data Loader : " + ex);
        }
    }

    private void tableDataClear() {
        try {
            while (0 <= invoiceCategoryTbl.getRowCount()) {
                DefaultTableModel table = (DefaultTableModel) invoiceCategoryTbl.getModel();
                table.removeRow(invoiceCategoryTbl.getRowCount() - 1);
            }
        } catch (Exception e) {
            System.out.println("Payment History Table Data Clear : " + e);
        }
    }
}
