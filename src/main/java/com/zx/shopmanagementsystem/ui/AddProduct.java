/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.zx.shopmanagementsystem.ui;

import com.zx.shopmanagementsystem.assests.Func;
import com.zx.shopmanagementsystem.assests.IconLocation;
import com.zx.shopmanagementsystem.components.ScrollBarCustom;
import com.zx.shopmanagementsystem.dbconnection.JDBC;
import com.zx.shopmanagementsystem.notifications.ConfirmDialog;
import com.zx.shopmanagementsystem.notifications.MessageDialog;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author User
 */
public class AddProduct extends javax.swing.JFrame {

    /**
     * Creates new form AddProduct
     */
    Func func = new Func();
    IconLocation il = new IconLocation();
    JDBC DB = new JDBC();

    ArrayList<Integer> discountIdArray = new ArrayList<>();
    ArrayList<Integer> supplierIdArray = new ArrayList<>();
    ArrayList<Integer> categoryIdArray = new ArrayList<>();
    ArrayList<Integer> barcodeIdArray = new ArrayList<>();
    ArrayList<Integer> productTypeIdArray = new ArrayList<>();
    ArrayList<Integer> productLoactionIdArray = new ArrayList<>();
    int maxId;
    int newId;

    public AddProduct() {
        initComponents();
        jScrollPane1.setVerticalScrollBar(new ScrollBarCustom());
        getMaxValue();
        supplierComboLoader();
        categoryComboLoader();
        discountComboLoader();
        barcodeComboLoader();
        productTypeComboLoader();
        productLocationComboLoader();
        manufactureDateTxt.setText("");
        expireDateTxt.setText("");
        head1.setFrame(this);
        setIconImage(Toolkit.getDefaultToolkit().getImage(il.logo));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        date1 = new com.zx.shopmanagementsystem.dateChooser.DateChooser();
        date2 = new com.zx.shopmanagementsystem.dateChooser.DateChooser();
        addProductBtnLbl = new javax.swing.JLabel();
        head1 = new com.zx.shopmanagementsystem.components.Head();
        productIdLbl = new javax.swing.JLabel();
        sellingPriceTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        dimentionTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        stockQuantityTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        productNameTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        brandTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        manufactureDateTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        expireDateTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        recivingPriceTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        barcodeScannerBtnLbl = new javax.swing.JLabel();
        productLocationIdCombo = new com.zx.shopmanagementsystem.components.ComboBoxSuggestion();
        productTypeIdCombo = new com.zx.shopmanagementsystem.components.ComboBoxSuggestion();
        discountIdCombo = new com.zx.shopmanagementsystem.components.ComboBoxSuggestion();
        categoryIdCombo = new com.zx.shopmanagementsystem.components.ComboBoxSuggestion();
        supplierIdCombo = new com.zx.shopmanagementsystem.components.ComboBoxSuggestion();
        barcodeCombo = new com.zx.shopmanagementsystem.components.ComboBoxSuggestion();
        panelBorder1 = new com.raven.swing.PanelBorder();
        jScrollPane1 = new javax.swing.JScrollPane();
        productDescriptionTxt = new javax.swing.JTextArea();
        iconLbl = new javax.swing.JLabel();

        date1.setForeground(new java.awt.Color(204, 0, 255));
        date1.setDateFormat("yyyy-MM-dd");
        date1.setTextRefernce(manufactureDateTxt);

        date2.setForeground(new java.awt.Color(204, 0, 255));
        date2.setDateFormat("yyyy-MM-dd");
        date2.setTextRefernce(expireDateTxt);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addProductBtnLbl.setPreferredSize(new java.awt.Dimension(406, 56));
        addProductBtnLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addProductBtnLblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addProductBtnLblMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addProductBtnLblMouseExited(evt);
            }
        });
        getContentPane().add(addProductBtnLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 660, 200, 50));

        head1.setHeaderTextColor("#000000");
        head1.setHeaderTitle("");
        head1.setOpaque(false);
        getContentPane().add(head1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, -1));

        productIdLbl.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        productIdLbl.setForeground(new java.awt.Color(42, 44, 116));
        productIdLbl.setText("0");
        getContentPane().add(productIdLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 185, 240, 20));

        sellingPriceTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        sellingPriceTxt.setPreferredSize(new java.awt.Dimension(139, 50));
        getContentPane().add(sellingPriceTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 520, 250, 45));

        dimentionTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        dimentionTxt.setPreferredSize(new java.awt.Dimension(139, 50));
        getContentPane().add(dimentionTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 620, 250, 45));

        stockQuantityTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        stockQuantityTxt.setPreferredSize(new java.awt.Dimension(139, 50));
        getContentPane().add(stockQuantityTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 220, 250, 45));

        productNameTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        productNameTxt.setPreferredSize(new java.awt.Dimension(139, 50));
        getContentPane().add(productNameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 270, 340, 45));

        brandTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        brandTxt.setPreferredSize(new java.awt.Dimension(139, 50));
        getContentPane().add(brandTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 220, 250, 45));

        manufactureDateTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        manufactureDateTxt.setPreferredSize(new java.awt.Dimension(139, 50));
        getContentPane().add(manufactureDateTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 315, 250, 45));

        expireDateTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        expireDateTxt.setPreferredSize(new java.awt.Dimension(139, 50));
        getContentPane().add(expireDateTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 315, 250, 45));

        recivingPriceTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        recivingPriceTxt.setPreferredSize(new java.awt.Dimension(139, 50));
        getContentPane().add(recivingPriceTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 520, 250, 45));

        barcodeScannerBtnLbl.setIcon(new javax.swing.ImageIcon("C:\\ShopManagementSystem\\src\\main\\java\\com\\zx\\shopmanagementsystem\\icons\\SearchBardcodeIcon.png")); // NOI18N
        barcodeScannerBtnLbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        barcodeScannerBtnLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                barcodeScannerBtnLblMouseClicked(evt);
            }
        });
        getContentPane().add(barcodeScannerBtnLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 425, 32, 30));

        productLocationIdCombo.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        productLocationIdCombo.setPreferredSize(new java.awt.Dimension(139, 50));
        getContentPane().add(productLocationIdCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 600, 250, 45));

        productTypeIdCombo.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        productTypeIdCombo.setPreferredSize(new java.awt.Dimension(139, 50));
        getContentPane().add(productTypeIdCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 510, 250, 45));

        discountIdCombo.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        discountIdCombo.setPreferredSize(new java.awt.Dimension(139, 50));
        getContentPane().add(discountIdCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 600, 250, 45));

        categoryIdCombo.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        categoryIdCombo.setPreferredSize(new java.awt.Dimension(139, 50));
        getContentPane().add(categoryIdCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 510, 250, 45));

        supplierIdCombo.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        supplierIdCombo.setPreferredSize(new java.awt.Dimension(139, 50));
        getContentPane().add(supplierIdCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 415, 250, 45));

        barcodeCombo.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        barcodeCombo.setPreferredSize(new java.awt.Dimension(139, 50));
        barcodeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcodeComboActionPerformed(evt);
            }
        });
        getContentPane().add(barcodeCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 415, 250, 45));

        panelBorder1.setBackground(new java.awt.Color(255, 255, 255));

        productDescriptionTxt.setColumns(20);
        productDescriptionTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        productDescriptionTxt.setRows(5);
        productDescriptionTxt.setBorder(null);
        productDescriptionTxt.setSelectionColor(new java.awt.Color(42, 44, 116));
        jScrollPane1.setViewportView(productDescriptionTxt);

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBorder1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBorder1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(panelBorder1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 365, 350, 110));

        iconLbl.setIcon(new javax.swing.ImageIcon("C:\\ShopManagementSystem\\src\\main\\java\\com\\zx\\shopmanagementsystem\\images\\Add_new_Product.png")); // NOI18N
        getContentPane().add(iconLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1366, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addProductBtnLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addProductBtnLblMouseClicked
        // TODO add your handling code here:
        //System.out.println(dynamicArray.get(discountIdCombo.getSelectedIndex()));
        addProduct();
    }//GEN-LAST:event_addProductBtnLblMouseClicked

    private void addProductBtnLblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addProductBtnLblMouseEntered
        // TODO add your handling code here:
        //func.iconSetter(addProductBtnLbl, il.addProductWhiteIcon2);
    }//GEN-LAST:event_addProductBtnLblMouseEntered

    private void addProductBtnLblMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addProductBtnLblMouseExited
        // TODO add your handling code here:
        //func.iconSetter(addProductBtnLbl, il.addProductPurpleIcon2);
    }//GEN-LAST:event_addProductBtnLblMouseExited

    private void barcodeScannerBtnLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barcodeScannerBtnLblMouseClicked
        // TODO add your handling code here:
        MessageDialog DialogBox = new MessageDialog(this);
        try {
            String pythonScript = "C:\\ShopManagementSystem\\src\\main\\java\\com\\zx\\shopmanagementsystem\\barcode_Python\\abcCopy.py";
            Process process = Runtime.getRuntime().exec("python " + pythonScript);

            InputStream inputStream = process.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            String line;
            String prv = "";

            while ((line = reader.readLine()) != null) {
                if (line.equals(prv)) {
                    System.out.println("Same Value");
                } else if (line.equals("Done")) {
                    System.out.println("Done");
                } else if (line.startsWith("QRCODE")) {
                    System.out.println("it is a QR");
                    //jsonRead(line.substring(6));  // Remove "QRCODE" prefix and update text
                } else {
                    System.out.println("it is not a QR");

                    if (barcodeChecker(line)) {
                        barcodeCombo.setSelectedItem(line);
                    } else {
                        System.out.println("Barcode Not Found : Add Product");
                        DialogBox.showMessage("ERROR!!!", "Barcode Not Found in System", 3);
                    }
                }
                prv = line;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_barcodeScannerBtnLblMouseClicked

    private void barcodeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcodeComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_barcodeComboActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddProduct().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addProductBtnLbl;
    private com.zx.shopmanagementsystem.components.ComboBoxSuggestion barcodeCombo;
    private javax.swing.JLabel barcodeScannerBtnLbl;
    private com.zx.shopmanagementsystem.components.RoundedText brandTxt;
    private com.zx.shopmanagementsystem.components.ComboBoxSuggestion categoryIdCombo;
    private com.zx.shopmanagementsystem.dateChooser.DateChooser date1;
    private com.zx.shopmanagementsystem.dateChooser.DateChooser date2;
    private com.zx.shopmanagementsystem.components.RoundedText dimentionTxt;
    private com.zx.shopmanagementsystem.components.ComboBoxSuggestion discountIdCombo;
    private com.zx.shopmanagementsystem.components.RoundedText expireDateTxt;
    private com.zx.shopmanagementsystem.components.Head head1;
    private javax.swing.JLabel iconLbl;
    private javax.swing.JScrollPane jScrollPane1;
    private com.zx.shopmanagementsystem.components.RoundedText manufactureDateTxt;
    private com.raven.swing.PanelBorder panelBorder1;
    private javax.swing.JTextArea productDescriptionTxt;
    private javax.swing.JLabel productIdLbl;
    private com.zx.shopmanagementsystem.components.ComboBoxSuggestion productLocationIdCombo;
    private com.zx.shopmanagementsystem.components.RoundedText productNameTxt;
    private com.zx.shopmanagementsystem.components.ComboBoxSuggestion productTypeIdCombo;
    private com.zx.shopmanagementsystem.components.RoundedText recivingPriceTxt;
    private com.zx.shopmanagementsystem.components.RoundedText sellingPriceTxt;
    private com.zx.shopmanagementsystem.components.RoundedText stockQuantityTxt;
    private com.zx.shopmanagementsystem.components.ComboBoxSuggestion supplierIdCombo;
    // End of variables declaration//GEN-END:variables

    private void supplierComboLoader() {
        try {
            ResultSet rs = DB.getdata("SELECT * FROM supplier");
            while (rs.next()) {
                String supplierName = rs.getString("supplier_name");
                int supplierId = rs.getInt("supplier_id");
                supplierIdCombo.addItem(supplierName);
                supplierIdArray.add(supplierId);
            }
        } catch (Exception ex) {
            System.out.println("Supplier Combo Loader : " + ex);
        }
    }

    private void categoryComboLoader() {
        try {
            ResultSet rs = DB.getdata("SELECT * FROM product_category");
            while (rs.next()) {
                String supplierName = rs.getString("category_name");
                int categoryId = rs.getInt("category_id");
                categoryIdCombo.addItem(supplierName);
                categoryIdArray.add(categoryId);
            }
        } catch (Exception ex) {
            System.out.println("Product Category Combo Loader : " + ex);
        }
    }

    private void discountComboLoader() {
        try {
            ResultSet rs = DB.getdata("SELECT * FROM discont");
            discountIdCombo.addItem("0" + "%");
            discountIdArray.add(0);
            while (rs.next()) {
                String supplierName = rs.getString("discount_presentage");
                String endDate = rs.getString("end_date");
                int disId = rs.getInt("discount_id");
                System.out.println(endDate);

                if (func.dateValidator(endDate) == 1) {
                    discountIdCombo.addItem(supplierName + "%");
                    discountIdArray.add(disId);
                } else {
                    System.out.println("Day Before");
                }

            }
        } catch (Exception ex) {
            System.out.println("Discount Combo Loader : " + ex);
        }
    }

    private void barcodeComboLoader() {
        try {
            ResultSet rs = DB.getdata("SELECT * FROM barcode");
            while (rs.next()) {
                String barcodeValue = rs.getString("barcode_value");
                int barcodeId = rs.getInt("barcode_id");
                barcodeCombo.addItem(barcodeValue);
                barcodeIdArray.add(barcodeId);
            }
        } catch (Exception ex) {
            System.out.println("Barcode Combo Loader : " + ex);
        }
    }

    private void productTypeComboLoader() {
        try {
            ResultSet rs = DB.getdata("SELECT * FROM product_type");
            while (rs.next()) {
                String productType = rs.getString("product_type");
                int typeId = rs.getInt("product_type_id");
                productTypeIdCombo.addItem(productType);
                productTypeIdArray.add(typeId);
            }
        } catch (Exception ex) {
            System.out.println("Product Type Combo Loader : " + ex);
        }
    }

    private void productLocationComboLoader() {
        try {
            ResultSet rs = DB.getdata("SELECT * FROM store_location");
            while (rs.next()) {
                String storeLocation = rs.getString("store_location_name");
                int locationId = rs.getInt("store_location_id");
                productLocationIdCombo.addItem(storeLocation);
                productLoactionIdArray.add(locationId);
            }
        } catch (Exception ex) {
            System.out.println("Product Type Combo Loader : " + ex);
        }
    }

    private boolean barcodeChecker(String barcode) {
        String sql = "SELECT * FROM barcode WHERE barcode_value=?";
        boolean Exist = false;
        try {
            PreparedStatement pstmt = DB.con().prepareStatement(sql);
            pstmt.setString(1, barcode);
            ResultSet resultSet = pstmt.executeQuery();
            if (resultSet.next()) {
                System.out.println("Barcode Found.");
                Exist = true;
            } else {
                System.out.println("Barcode Not Found.");
                Exist = false;
            }
        } catch (Exception ex) {
            System.out.println("Barcode Checker : " + ex.getMessage());
        }
        return Exist;
    }

    private void getMaxValue() {
        try {
            java.sql.ResultSet rs1 = DB.getdata("SELECT MAX(product_id) FROM product");
            if (rs1.next()) {
                //System.out.println("Table not empty");
                maxId = rs1.getInt("max(product_id)");
                //System.out.println(maxCusId);
                //customerIdLbl.setText(String.valueOf(maxDisId + 1));
                productIdLbl.setText(String.valueOf(maxId + 1));
                newId(maxId);
            } else {
                System.out.println("Table Empty");
            }
        } catch (Exception ex) {
            System.out.println("Get max Value : " + ex.getMessage());
        }
    }

    private void newId(int maxValue) {
        newId = maxValue + 1;

    }

    private void addProduct() {
        MessageDialog DialogBox = new MessageDialog(this);
        String productName = productNameTxt.getText();
        String recivingPrice = recivingPriceTxt.getText();
        String sellingPrice = sellingPriceTxt.getText();
        String stockQuantity = stockQuantityTxt.getText();
        String description = productDescriptionTxt.getText();
        String brand = brandTxt.getText();
        String dimention = dimentionTxt.getText();
        String manufactureDate = manufactureDateTxt.getText();
        String expDate = expireDateTxt.getText();
        int supplierId = supplierIdArray.get(supplierIdCombo.getSelectedIndex());
        int barcodeValue = barcodeIdArray.get(barcodeCombo.getSelectedIndex());
        int categoryId = categoryIdArray.get(categoryIdCombo.getSelectedIndex());
        int typeId = productTypeIdArray.get(productTypeIdCombo.getSelectedIndex());
        int discoundId;
        if (discountIdCombo.getItemCount() == 1) {
            discoundId = 0;
        } else {
            discoundId = discountIdArray.get(discountIdCombo.getSelectedIndex());
        }
        int locationId = productLoactionIdArray.get(productLocationIdCombo.getSelectedIndex());

        if (productName.equals("")) {
            System.out.println("Product Name Empty");
            DialogBox.showMessage("WARNING!!!", "Product Name Empty", 2);
        } else if (recivingPrice.equals("")) {
            System.out.println("Reciving Price Empty");
            DialogBox.showMessage("WARNING!!!", "Reciving Price Empty", 2);
        } else if (sellingPrice.equals("")) {
            System.out.println("Selling Price Empty");
            DialogBox.showMessage("WARNING!!!", "Selling Price Empty", 2);
        } else if (stockQuantity.equals("")) {
            System.out.println("Stock Quantity Empty");
            DialogBox.showMessage("WARNING!!!", "Stock Quantity Empty", 2);
        } else {
            ConfirmDialog confrim = new ConfirmDialog(this);
            confrim.showMessage("Save", "Do you want to Add ?");
            if (confrim.getMessageType() == ConfirmDialog.MessageType.YES) {
                System.out.println("Yes");
                if (manufactureDate.equals("") || expDate.equals("")) {
                    System.out.println("Date Empty");
                    try {
                        DB.putdata("INSERT INTO product (product_id, product_name, reciving_price, selling_price, stock_quantity, description, brand, dimensions, manufacturing_date, expiry_date, supplier_id, barcode_id, category_id, product_type_id, discount_id, store_location_id) VALUES('" + newId + "','" + productName + "','" + recivingPrice + "','" + sellingPrice + "','" + stockQuantity + "','" + description + "','" + brand + "','" + dimention + "','" + manufactureDate + "','" + expDate + "','" + supplierId + "','" + barcodeValue + "','" + categoryId + "','" + typeId + "','" + discoundId + "','" + locationId + "')");
                        System.out.println("Data saved");
                        String code = "{\"barcode\":\"" + barcodeCombo.getSelectedItem() + "\"}";
                        func.QRGenerator(code, productName);
                        DialogBox.showMessage("Saved", "Product Saved\nQR Code Created.", 1);
                        getMaxValue();
                        clear();
                    } catch (Exception ex) {
                        System.out.println("Data Save Without Date : " + ex);
                    }
                } else {
                    if ((manufacDateVali(manufactureDate))) {
                        System.out.println("Manufacture Date Not Valid");
                        DialogBox.showMessage("WARNING!!!", "Manufacture Date Not Valid", 2);
                    } else {
                        if (expDateVali(manufactureDate, expDate)) {
                            System.out.println("Date Valid");
                            try {
                                DB.putdata("INSERT INTO product (product_id, product_name, reciving_price, selling_price, stock_quantity, description, brand, dimensions, manufacturing_date, expiry_date, supplier_id, barcode_id, category_id, product_type_id, discount_id, store_location_id) VALUES('" + newId + "','" + productName + "','" + recivingPrice + "','" + sellingPrice + "','" + stockQuantity + "','" + description + "','" + brand + "','" + dimention + "','" + manufactureDate + "','" + expDate + "','" + supplierId + "','" + barcodeValue + "','" + categoryId + "','" + typeId + "','" + discoundId + "','" + locationId + "')");
                                System.out.println("Data saved");
                                String code = "{\"barcode\":\"" + barcodeCombo.getSelectedItem() + "\"}";
                                func.QRGenerator(code, productName);
                                DialogBox.showMessage("Saved", "Product Saved\nQR Code Created.", 1);
                                getMaxValue();
                                clear();
                            } catch (Exception ex) {
                                System.out.println("Data Save With Date : " + ex.getMessage());
                            }

                        } else {
                            System.out.println("Expire Date Not Valid");
                            DialogBox.showMessage("WARNING!!!", "Expire Date Not Valid", 2);
                        }
                    }
                }
            } else {
                System.out.println("No");
            }

        }
    }

    private void clear() {
        productNameTxt.setText("");
        recivingPriceTxt.setText("");
        sellingPriceTxt.setText("");
        stockQuantityTxt.setText("");
        productDescriptionTxt.setText("");
        brandTxt.setText("");
        dimentionTxt.setText("");
        manufactureDateTxt.setText("");
        expireDateTxt.setText("");
        supplierIdCombo.setSelectedIndex(0);
        barcodeCombo.setSelectedIndex(0);
        categoryIdCombo.setSelectedIndex(0);
        productTypeIdCombo.setSelectedIndex(0);
        discountIdCombo.setSelectedIndex(0);
        productLocationIdCombo.setSelectedIndex(0);
    }

    private boolean manufacDateVali(String manuDate) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date currentDate = new Date(); // Current date
        String manufactureDateStr = manuDate;
        boolean date = false;
        try {
            Date manufactureDate = sdf.parse(manufactureDateStr);
            Date validStartDate = currentDate;

            date = !manufactureDate.before(validStartDate);
            //System.out.println("Manufacture date is valid.");
            //System.out.println("Manufacture date is not valid.");
        } catch (ParseException ex) {
            System.out.println("Manu date validator : " + ex.getMessage());
        }
        return date;
    }

    private boolean expDateVali(String manuDate, String expireDateStr) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date currentDate = new Date(); // Current date
        String manufactureDateStr = manuDate;
        String expirationDateStr = expireDateStr;
        boolean date = false;
        try {
            Date manufactureDate = sdf.parse(manufactureDateStr);
            Date expirationDate = sdf.parse(expirationDateStr);
            Date validStartDate = currentDate;

            date = expirationDate.after(manufactureDate) && expirationDate.after(validStartDate);
            //System.out.println("Expiration date is valid.");
            //System.out.println("Expiration date is not valid.");
        } catch (ParseException ex) {
            System.out.println("Exp date validator : " + ex.getMessage());
        }
        return date;
    }

}
