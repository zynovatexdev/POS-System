/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.zx.shopmanagementsystem.ui;

import com.zx.shopmanagementsystem.assests.EmailSender;
import com.zx.shopmanagementsystem.notifications.MessageDialog;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.JFileChooser;

/**
 *
 * @author Aruna Chinthaka
 */
public class MailSend extends javax.swing.JFrame {

    /**
     * Creates new form MailSend
     */
    public MailSend() {
        initComponents();
        head1.setFrame(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        subjectMailtxt = new com.zx.shopmanagementsystem.components.RoundedText();
        toMailtxt = new com.zx.shopmanagementsystem.components.RoundedText();
        fromMailTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        sendBtnLbl = new javax.swing.JLabel();
        head1 = new com.zx.shopmanagementsystem.components.Head();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageMailTxt = new javax.swing.JTextPane();
        imageLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1093, 616));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        subjectMailtxt.setHintText("Enter Mail Subject");
        getContentPane().add(subjectMailtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 275, 260, 40));

        toMailtxt.setHintText("Enter Recipient Mail Address");
        getContentPane().add(toMailtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 190, 260, 40));

        fromMailTxt.setText("arunachinthaka99@gmail.com");
        fromMailTxt.setEnabled(false);
        fromMailTxt.setHintText("Enter From Mail");
        getContentPane().add(fromMailTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 190, 260, 40));

        sendBtnLbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sendBtnLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendBtnLblMouseClicked(evt);
            }
        });
        getContentPane().add(sendBtnLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 526, 195, 40));

        head1.setOpaque(false);
        getContentPane().add(head1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1100, -1));

        jScrollPane1.setViewportView(messageMailTxt);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 360, 260, 140));

        imageLbl.setIcon(new javax.swing.ImageIcon("C:\\ShopManagementSystem\\src\\main\\java\\com\\zx\\shopmanagementsystem\\images\\SendnewEmail.png")); // NOI18N
        getContentPane().add(imageLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1093, 616));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void sendBtnLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendBtnLblMouseClicked
        // TODO add your handling code here:
        showFileChooser();
    }//GEN-LAST:event_sendBtnLblMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MailSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MailSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MailSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MailSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MailSend().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.zx.shopmanagementsystem.components.RoundedText fromMailTxt;
    private com.zx.shopmanagementsystem.components.Head head1;
    private javax.swing.JLabel imageLbl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane messageMailTxt;
    private javax.swing.JLabel sendBtnLbl;
    private com.zx.shopmanagementsystem.components.RoundedText subjectMailtxt;
    private com.zx.shopmanagementsystem.components.RoundedText toMailtxt;
    // End of variables declaration//GEN-END:variables
    private void showFileChooser() {
        MessageDialog DialogBox = new MessageDialog(this);
        EmailSender email = new EmailSender();

        if (toMailtxt.getText().equals("")) {
            java.awt.Toolkit.getDefaultToolkit().beep();
            DialogBox.showMessage("WARNING !!!", "To mail Can't Empty", 2);
        } else {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setMultiSelectionEnabled(true);
            int result = fileChooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                File[] selectedFiles = fileChooser.getSelectedFiles();

                if (selectedFiles.length == 1) {
                    // Single file selected
                    String filePath = selectedFiles[0].getAbsolutePath();
                    System.out.println("Selected File Path: " + filePath);
                    if (isValidEmail(toMailtxt.getText())) {
                        email.emailSetter(toMailtxt.getText(), subjectMailtxt.getText(), messageMailTxt.getText(), filePath, fromMailTxt.getText());
                        if (email.getExitCode() == 0) {
                            System.out.println("Email sent successfully.");
                            DialogBox.showMessage("Done!!!", "Send Successfully", 1);
                        } else {
                            System.out.println("Error sending email. Exit code: " + email.getExitCode());
                            DialogBox.showMessage("ERROR!!!", "Email Not Send,\nPlease Check and send Again\nExitCode : " + email.getExitCode(), 3);
                        }
                    } else {
                        DialogBox.showMessage("WARNING!!!", "Recipient Mail Address \nWrong Email Address", 2);
                    }

                } else if (selectedFiles.length > 1) {
                    // Multiple files selected
                    String zipFilePath = compressFiles(selectedFiles);
                    if (isValidEmail(toMailtxt.getText())) {
                        email.emailSetter(toMailtxt.getText(), subjectMailtxt.getText(), messageMailTxt.getText(), zipFilePath, fromMailTxt.getText());
                        if (email.getExitCode() == 0) {
                            System.out.println("Email sent successfully.");
                            DialogBox.showMessage("Done!!!", "Send Successfully", 1);
                        } else {
                            System.out.println("Error sending email. Exit code: " + email.getExitCode());
                            DialogBox.showMessage("ERROR!!!", "Email Not Send,\nPlease Check and send Again\nExitCode : " + email.getExitCode(), 3);
                        }
                    } else {
                        DialogBox.showMessage("WARNING!!!", "Recipient Mail Address \nWrong Email Address", 2);
                    }
                    System.out.println("Compressed Zip File Path: " + zipFilePath);

                    // Delete the zip file after program execution
                    deleteFile(zipFilePath);
                }

            }
        }

    }

    private String compressFiles(File[] selectedFiles) {
        try {
            String zipFilePath = "compressedFiles.zip";
            FileOutputStream fos = new FileOutputStream(zipFilePath);
            ZipOutputStream zipOut = new ZipOutputStream(fos);

            for (File file : selectedFiles) {
                try (FileInputStream fis = new FileInputStream(file)) {
                    ZipEntry zipEntry = new ZipEntry(file.getName());
                    zipOut.putNextEntry(zipEntry);

                    byte[] bytes = new byte[1024];
                    int length;
                    while ((length = fis.read(bytes)) >= 0) {
                        zipOut.write(bytes, 0, length);
                    }
                }
            }

            zipOut.close();
            fos.close();

            return zipFilePath;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    private void deleteFile(String filePath) {
        File file = new File(filePath);
        if (file.delete()) {
            System.out.println("Zip file deleted successfully.");
        } else {
            System.out.println("Failed to delete zip file.");
        }
    }

    private boolean isValidEmail(String email) {
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
        Pattern pattern = Pattern.compile(emailRegex);
        Matcher matcher = pattern.matcher(email);
        return matcher.matches();
    }
}
