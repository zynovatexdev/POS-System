/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.zx.shopmanagementsystem.ui;

import com.zx.shopmanagementsystem.assests.Func;
import com.zx.shopmanagementsystem.assests.IconLocation;
import com.zx.shopmanagementsystem.components.ScrollBarCustom;
import com.zx.shopmanagementsystem.dbconnection.JDBC;
import com.zx.shopmanagementsystem.notifications.ConfirmDialog;
import com.zx.shopmanagementsystem.notifications.MessageDialog;
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author User
 */
public class AddStoreLocation extends javax.swing.JFrame {

    /**
     * Creates new form AddBarcode
     */
    Func func = new Func();
    IconLocation il = new IconLocation();
    JDBC DB = new JDBC();

    int maxId;
    int newId;

    public AddStoreLocation() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(il.logo));
        getMaxValue();
        head1.setFrame(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        head1 = new com.zx.shopmanagementsystem.components.Head();
        addStoreLocation = new javax.swing.JLabel();
        storeLocationTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        panelBorder1 = new com.raven.swing.PanelBorder();
        scrollPaneWin111 = new com.zx.shopmanagementsystem.menu.scroll.win11.ScrollPaneWin11();
        storeLocationDescription = new javax.swing.JTextArea();
        iconLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        head1.setHeaderTextColor("#000000");
        head1.setHeaderTitle("");
        head1.setOpaque(false);
        getContentPane().add(head1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, -1));

        addStoreLocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addStoreLocation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addStoreLocationMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addStoreLocationMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addStoreLocationMouseExited(evt);
            }
        });
        getContentPane().add(addStoreLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 600, 200, 50));

        storeLocationTxt.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        storeLocationTxt.setHintText("Enter Product Type");
        storeLocationTxt.setPreferredSize(new java.awt.Dimension(129, 50));
        getContentPane().add(storeLocationTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, 340, -1));

        panelBorder1.setBackground(new java.awt.Color(238, 238, 238));

        scrollPaneWin111.setBorder(null);

        storeLocationDescription.setColumns(20);
        storeLocationDescription.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        storeLocationDescription.setRows(5);
        scrollPaneWin111.setViewportView(storeLocationDescription);

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneWin111, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneWin111, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(panelBorder1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 330, 330, 150));

        iconLbl.setBackground(new java.awt.Color(250, 250, 250));
        iconLbl.setIcon(new javax.swing.ImageIcon("C:\\ShopManagementSystem\\src\\main\\java\\com\\zx\\shopmanagementsystem\\images\\Add_Store_Location.png")); // NOI18N
        getContentPane().add(iconLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addStoreLocationMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addStoreLocationMouseEntered
        // TODO add your handling code here:

    }//GEN-LAST:event_addStoreLocationMouseEntered

    private void addStoreLocationMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addStoreLocationMouseExited
        // TODO add your handling code here:

    }//GEN-LAST:event_addStoreLocationMouseExited

    private void addStoreLocationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addStoreLocationMouseClicked
        // TODO add your handling code here:
        MessageDialog DialogBox = new MessageDialog(this);
        if (storeLocationTxt.getText().equals("")) {
            DialogBox.showMessage("WARNING!!!", "Store Location Text Empty", 2);
        } else if (storeLocationDescription.getText().equals("")) {
            DialogBox.showMessage("WARNING!!!", "Store Location Description Empty", 2);
        } else {
            if (locationChecker(storeLocationTxt.getText())) {
                DialogBox.showMessage("ERROR!!!", "Store Location is already have.", 3);
            } else {
                ConfirmDialog confrim = new ConfirmDialog(this);
                confrim.showMessage("Save", "Do you want to Add ?");
                if (confrim.getMessageType() == ConfirmDialog.MessageType.YES) {
                    System.out.println("Yes");
                    try {
                        DB.putdata("INSERT INTO store_location (store_location_id, store_location_name, store_location_description) VALUES ('" + newId + "', '" + storeLocationTxt.getText() + "', '" + storeLocationDescription.getText() + "')");
                        DialogBox.showMessage("Done!!!", "Store Location Saved!!!", 1);
                        storeLocationTxt.setText("");
                        storeLocationDescription.setText("");
                        getMaxValue();
                    } catch (Exception ex) {
                        Logger.getLogger(AddStoreLocation.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    System.out.println("No");
                }
            }

        }

    }//GEN-LAST:event_addStoreLocationMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddStoreLocation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddStoreLocation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddStoreLocation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddStoreLocation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddStoreLocation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addStoreLocation;
    private com.zx.shopmanagementsystem.components.Head head1;
    private javax.swing.JLabel iconLbl;
    private com.raven.swing.PanelBorder panelBorder1;
    private com.zx.shopmanagementsystem.menu.scroll.win11.ScrollPaneWin11 scrollPaneWin111;
    private javax.swing.JTextArea storeLocationDescription;
    private com.zx.shopmanagementsystem.components.RoundedText storeLocationTxt;
    // End of variables declaration//GEN-END:variables

    private void getMaxValue() {
        try {
            java.sql.ResultSet rs1 = DB.getdata("SELECT MAX(store_location_id) FROM store_location");
            if (rs1.next()) {
                //System.out.println("Table not empty");
                maxId = rs1.getInt("max(store_location_id)");
                //System.out.println(maxCusId);
                //customerIdLbl.setText(String.valueOf(maxCusId + 1));
                newId(maxId);
            } else {
                System.out.println("Table Empty");
            }
        } catch (Exception ex) {
            Logger.getLogger(CustomerRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void newId(int maxValue) {
        newId = maxValue + 1;
    }

    private boolean locationChecker(String username) {
        String sql = "SELECT * FROM store_location WHERE store_location_name=?";
        boolean Exist = false;
        try {
            PreparedStatement pstmt = DB.con().prepareStatement(sql);
            pstmt.setString(1, username);
            ResultSet resultSet = pstmt.executeQuery();
            if (resultSet.next()) {
                System.out.println("Store Location is already have.");
                Exist = true;
            } else {
                System.out.println("Store Location is available.");
                Exist = false;
            }
        } catch (Exception ex) {
            Logger.getLogger(UserRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
        return Exist;
    }
}
