/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.zx.shopmanagementsystem.ui;

import com.zx.shopmanagementsystem.dbconnection.JDBC;
import com.zx.shopmanagementsystem.notifications.MessageDialog;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import javax.swing.text.PlainDocument;

/**
 *
 * @author aruna
 */
public class GetDebt extends javax.swing.JFrame {

    /**
     * Creates new form GetDebt
     */
    int DebtID;
    double outStanding;
    JDBC DB = new JDBC();
    ArrayList<Integer> paymentMethodId = new ArrayList<>();

    public GetDebt() {
        initComponents();
        head1.setFrame(this);
        paymentComboLoad();
        onlyNumbers(paymentTxt);
        // Add a DocumentListener to paymentTxt
        paymentTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updatePaymentValue();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updatePaymentValue();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updatePaymentValue();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser1 = new com.zx.shopmanagementsystem.dateChooser.DateChooser();
        head1 = new com.zx.shopmanagementsystem.components.Head();
        lastPayDateLbl = new javax.swing.JLabel();
        outstabdingLbl = new javax.swing.JLabel();
        customerNameLbl = new javax.swing.JLabel();
        nextDateTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        paymentTxt = new com.zx.shopmanagementsystem.components.RoundedText();
        statusCombo = new com.zx.shopmanagementsystem.components.ComboBoxSuggestion();
        paymentMethodCombo = new com.zx.shopmanagementsystem.components.ComboBoxSuggestion();
        saveBtnLbl = new javax.swing.JLabel();
        iconLbl = new javax.swing.JLabel();

        dateChooser1.setForeground(new java.awt.Color(42, 44, 116));
        dateChooser1.setDateFormat("yyyy-MM-dd");
        dateChooser1.setTextRefernce(nextDateTxt);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        head1.setOpaque(false);
        getContentPane().add(head1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, -1));

        lastPayDateLbl.setFont(new java.awt.Font("Poppins SemiBold", 1, 18)); // NOI18N
        lastPayDateLbl.setForeground(new java.awt.Color(42, 44, 116));
        getContentPane().add(lastPayDateLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 440, 230, 30));

        outstabdingLbl.setFont(new java.awt.Font("Poppins SemiBold", 1, 18)); // NOI18N
        outstabdingLbl.setForeground(new java.awt.Color(42, 44, 116));
        getContentPane().add(outstabdingLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 240, 230, 30));

        customerNameLbl.setFont(new java.awt.Font("Poppins SemiBold", 1, 18)); // NOI18N
        customerNameLbl.setForeground(new java.awt.Color(42, 44, 116));
        getContentPane().add(customerNameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 330, 230, 30));

        nextDateTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        nextDateTxt.setHintText("Enter Next Date");
        getContentPane().add(nextDateTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 230, 300, 45));

        paymentTxt.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        paymentTxt.setHintText("Enter Payment Amount");
        getContentPane().add(paymentTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 540, 300, 45));

        statusCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pending", "Done" }));
        statusCombo.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        getContentPane().add(statusCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 440, 300, 45));

        paymentMethodCombo.setFont(new java.awt.Font("Poppins SemiBold", 1, 13)); // NOI18N
        getContentPane().add(paymentMethodCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 330, 300, 45));

        saveBtnLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveBtnLblMouseClicked(evt);
            }
        });
        getContentPane().add(saveBtnLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 606, 200, 50));

        iconLbl.setIcon(new javax.swing.ImageIcon("C:\\ShopManagementSystem\\src\\main\\java\\com\\zx\\shopmanagementsystem\\images\\GetDebt.png")); // NOI18N
        getContentPane().add(iconLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void saveBtnLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBtnLblMouseClicked
        // TODO add your handling code here:
        save();
    }//GEN-LAST:event_saveBtnLblMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GetDebt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GetDebt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GetDebt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GetDebt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GetDebt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel customerNameLbl;
    private com.zx.shopmanagementsystem.dateChooser.DateChooser dateChooser1;
    private com.zx.shopmanagementsystem.components.Head head1;
    private javax.swing.JLabel iconLbl;
    private javax.swing.JLabel lastPayDateLbl;
    private com.zx.shopmanagementsystem.components.RoundedText nextDateTxt;
    private javax.swing.JLabel outstabdingLbl;
    private com.zx.shopmanagementsystem.components.ComboBoxSuggestion paymentMethodCombo;
    private com.zx.shopmanagementsystem.components.RoundedText paymentTxt;
    private javax.swing.JLabel saveBtnLbl;
    private com.zx.shopmanagementsystem.components.ComboBoxSuggestion statusCombo;
    // End of variables declaration//GEN-END:variables
    public void showWindow(int DebtID) {
        this.setVisible(true);
        this.DebtID = DebtID;
        formDataLoad();
    }

    private void formDataLoad() {
        String sql = "SELECT debt.*, customer.customer_name\n"
                + "FROM shopdb.debt AS debt\n"
                + "JOIN shopdb.customer AS customer ON debt.customer_id = customer.customer_id\n"
                + "WHERE debt.debt_id = '" + DebtID + "';";
        try {
            ResultSet rs = DB.getdata(sql);
            while (rs.next()) {
                double outstanding_amount = Double.parseDouble(rs.getString("outstanding_amount"));
                String customer_name = rs.getString("customer_name");
                String last_pay_date = rs.getString("last_pay_date");
                outStanding = outstanding_amount;

                System.out.println("outstanding_amount : " + outstanding_amount);
                System.out.println("customer_name : " + customer_name);
                System.out.println("last_pay_date : " + last_pay_date);
                outstabdingLbl.setText(String.valueOf(outstanding_amount + "/="));
                customerNameLbl.setText(customer_name);
                lastPayDateLbl.setText(last_pay_date);
            }
        } catch (Exception ex) {
            Logger.getLogger(GetDebt.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void paymentComboLoad() {
        try {
            String sql = "SELECT * FROM payment_method";
            ResultSet rs = DB.getdata(sql);
            while (rs.next()) {
                int payment_method_id = rs.getInt("payment_method_id");
                String payment_method_type = rs.getString("payment_method_type");
                paymentMethodCombo.addItem(payment_method_type);
                paymentMethodId.add(payment_method_id);
            }
        } catch (Exception ex) {
            Logger.getLogger(GetDebt.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void save() {
        MessageDialog DialogBox = new MessageDialog(this);
        if (paymentTxt.getText().equals("")) {
            System.out.println("Payment Text Empty.");
            DialogBox.showMessage("WARNING!!!", "Enter Payment Amount", 2);

        } else {
            System.out.println("All Done");
            pay();

        }

    }

    private void onlyNumbers(com.zx.shopmanagementsystem.components.RoundedText text) {
        PlainDocument doc = (PlainDocument) text.getDocument();
        doc.setDocumentFilter(new DocumentFilter() {
            private final Pattern pattern = Pattern.compile("\\d*\\.?\\d*");

            @Override
            public void insertString(DocumentFilter.FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
                Matcher matcher = pattern.matcher(string);
                if (!matcher.matches()) {
                    return;
                }
                super.insertString(fb, offset, string, attr);
            }

            @Override
            public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                Matcher matcher = pattern.matcher(text);
                if (!matcher.matches()) {
                    return;
                }
                super.replace(fb, offset, length, text, attrs);
            }
        });
    }

    private int dateValidetor(String date) {
        String dateString = date;
        System.out.println("Date : " + dateString);
        int value;
        // Parse the string date into a LocalDate object
        LocalDate inputDate = LocalDate.parse(dateString, DateTimeFormatter.ISO_DATE);

        // Get today's date
        LocalDate today = LocalDate.now();

        // Compare the two dates
        int comparisonResult = inputDate.compareTo(today);

        if (comparisonResult > 0) {
            value = 1;
            System.out.println("The input date is greater than today's date.");
        } else if (comparisonResult < 0) {
            System.out.println("The input date is less than today's date.");
            value = 0;
        } else {
            System.out.println("The input date is equal to today's date.");
            value = -1;

        }
        return value;
    }

    private void pay() {
        MessageDialog DialogBox = new MessageDialog(this);
        double payment = Double.parseDouble(paymentTxt.getText());
        String date = nextDateTxt.getText();
        if (outStanding > payment) {
            if (dateValidetor(date) == 0 || dateValidetor(date) == -1) {
                DialogBox.showMessage("ERROR!!!", "Date should greater than today.", 3);
            } else {
                double newOutstanding = outStanding - payment;
                String sql = "UPDATE debt\n"
                        + "SET \n"
                        + "    outstanding_amount = '" + newOutstanding + "',\n"
                        + "    last_pay_amount = '" + payment + "',\n"
                        + "    next_date = '" + nextDateTxt.getText() + "'\n,"
                        + "    last_pay_date = '" + LocalDate.now() + "'\n,"
                        + "    status = 'Pending'\n"
                        + "WHERE debt_id='" + DebtID + "';";
                try {
                    DB.putdata(sql);
                    DialogBox.showMessage("Done!!!", "Debt Saved!!!", 1);
                } catch (Exception ex) {
                    Logger.getLogger(GetDebt.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else if (outStanding <= payment) {
            double balance = payment - outStanding;
            System.out.println("Balance : " + balance);
            String sql = "UPDATE debt\n"
                    + "SET \n"
                    + "    outstanding_amount = '0.00',\n"
                    + "    last_pay_amount = '" + outStanding + "',\n"
                    + "    next_date = '" + nextDateTxt.getText() + "'\n,"
                    + "    last_pay_date = '" + LocalDate.now() + "'\n,"
                    + "    status = 'Done'\n"
                    + "WHERE debt_id='" + DebtID + "';";
            try {
                DB.putdata(sql);
                DialogBox.showMessage("Done!!!", "Debt Saved!!!", 1);
            } catch (Exception ex) {
                Logger.getLogger(GetDebt.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void updatePaymentValue() {
        // Get the current value of paymentTxt
        String paymentValue = paymentTxt.getText();
        if (paymentValue.equals("")) {
            System.out.println("Empty");
        } else {
            double doubledPayment = Double.parseDouble(paymentValue);
            if (doubledPayment >= outStanding) {
                statusCombo.setSelectedIndex(1);
                dateChooser1.toDay();
                nextDateTxt.setEnabled(false);
            } else {
                statusCombo.setSelectedIndex(0);
            }
        }

    }

}
